
//defining adressess for Port B and D
// Start up adressess
#define RCGCGPIO (*((unsigned long *) 0x400FE608)) 
#define PRGPIO (*((unsigned long *) 0x400FEA08))
#define RCGCTIMER (*((unsigned long *) 0x400FE604)) 
#define PRTIMER (*((unsigned long *) 0x400FEA04))
//(For motors) Config GPIO Port B adressess (0x40005000)
#define PORTB_AFSEL (*((unsigned long *) 0x40005420))
#define PORTB_DEN (*((unsigned long *) 0x4000551C))
#define PORTB_PCTL (*((unsigned long *) 0x4000552C))
#define PORTB_DIR (*((unsigned long *) 0x40005400))
//(For keypad) Config GPIO Port D adressess (0x40007000)
#define PORTD_DIR (*((unsigned long *) 0x40007400))
#define PORTD_DEN (*((unsigned long *) 0x4000751C))
#define PORTD_PDR (*((unsigned long *) 0x40007514))
#define PORTD_DATA (*((unsigned long *) 0x400073FC))
	//TIMERS (Timer base 0x400FE000, Timer0: 0x40030000, Timer1: 0x40031000)
#define TIMER0_CTL (*((unsigned long *) 0x4003000C))// PWM at PB 6 and 7
#define TIMER0_CFG (*((unsigned long *) 0x40030000))
#define TIMER0_TAMR (*((unsigned long *) 0x40030004))//PWM PB6
#define TIMER0_TAPR (*((unsigned long *) 0x40030038))
#define TIMER0_TAILR (*((unsigned long *) 0x40030028))
#define TIMER0_TAPMR (*((unsigned long *) 0x40030040))
#define TIMER0_TAMATCH (*((unsigned long *) 0x40030030))
#define TIMER0_TBMR (*((unsigned long *) 0x40030008))//PWM PB7
#define TIMER0_TBPR (*((unsigned long *) 0x4003003C))
#define TIMER0_TBILR (*((unsigned long *) 0x4003002C))
#define TIMER0_TBPMR (*((unsigned long *) 0x40030044))
#define TIMER0_TBMATCH (*((unsigned long *) 0x40030034))
#define TIMER1_CTL (*((unsigned long *) 0x4003100C))// PWM at PB 4 and 5
#define TIMER1_CFG (*((unsigned long *) 0x40031000))
#define TIMER1_TAMR (*((unsigned long *) 0x40031004))//PWM PB4
#define TIMER1_TAPR (*((unsigned long *) 0x40031038))
#define TIMER1_TAILR (*((unsigned long *) 0x40031028))
#define TIMER1_TAPMR (*((unsigned long *) 0x40031040))
#define TIMER1_TAMATCH (*((unsigned long *) 0x40031030))
#define TIMER1_TBMR (*((unsigned long *) 0x40031008))//PWM PB5
#define TIMER1_TBPR (*((unsigned long *) 0x4003103C))
#define TIMER1_TBILR (*((unsigned long *) 0x4003102C))
#define TIMER1_TBPMR (*((unsigned long *) 0x40031044))
#define TIMER1_TBMATCH (*((unsigned long *) 0x40031034))
	
//Start up GPIO B and D

int setup(void)
{

// Starts up GPIO Ports B and D 	
	RCGCGPIO = RCGCGPIO | 0xA;
	
	while( (PRGPIO & 0xA) != 0xA){};
	
// Configure Port B (& ~ is bit clear)
//////////////////////////////////// PWM MOTOR TIMERS ////////////////////////////////////////////////////////////////////////////
	PORTB_DIR = PORTB_DIR | 0xF0 ; // Pins 4,5,6,7 are outputs 
	PORTB_AFSEL = PORTB_AFSEL | 0xF0 ; //PINS 4,5,6,7 of port B will be PWM signals for the motors
	PORTB_DEN = PORTB_DEN | 0xFF; 
	PORTB_PCTL = PORTB_PCTL | 0x00004444;// Now port B, pins 4,5,6,7 should be PWM signals 0,1,2,3 are normal for now

// Start up timers 0 and 1 aka bits 0 and 1
	RCGCTIMER = RCGCTIMER | 0x3 ;
	
	while( (PRTIMER & 0x3) !=0x3) {};	

// configure timer 0 (PB6=A) (PB7=B)
	TIMER0_CTL = TIMER0_CTL & ~ 0x101 ; // Timers 0 A(0x1) and B(0x100) are disabled
	TIMER0_CTL = TIMER0_CTL & ~ 0x4040; // PWM signal is NOT inverted
	TIMER0_CFG = TIMER0_CFG | 0x4;// Two 16 bit PWM signals
// For Port B pin 6 (TIMER 0A)	
	TIMER0_TAMR = TIMER0_TAMR | 0xA; // Periodic PWM output
	TIMER0_TAPR = TIMER0_TAPR | 0xAB; // Prescale
	TIMER0_TAILR = TIMER0_TAILR | 0xFFFF; // Preload
	TIMER0_TAMATCH = TIMER0_TAMATCH | 0x4CCD; // 70% duty cycle
	TIMER0_TAPMR = TIMER0_TAPMR | 0xAB; // Match prescale value (I think this is the prescale value?)
// For Port B Pin 7 (TIMER 0B) (Same configuration as before)
	TIMER0_TBMR = TIMER0_TBMR | 0xA; 
	TIMER0_TBPR = TIMER0_TBPR | 0xAB; 
	TIMER0_TBILR = TIMER0_TBILR | 0xFFFF; 
	TIMER0_TBMATCH = TIMER0_TBMATCH | 0x4CCD; 
	TIMER0_TBPMR = TIMER0_TBPMR | 0xAB; 
// configure timer 1 (PB4=A) (PB5=B)
	TIMER1_CTL = TIMER1_CTL & ~ 0x101 ; // Timers 1 A(0x1) and B(0x100) are disabled
	TIMER1_CTL = TIMER1_CTL & ~ 0x4040; // PWM signal is NOT inverted
	TIMER1_CFG = TIMER1_CFG | 0x4;// Two 16 bit PWM signals
// For Port B Pin 4 (TIMER 1A) (Same configuration as before)
	TIMER1_TAMR = TIMER1_TAMR | 0xA; 
	TIMER1_TAPR = TIMER1_TAPR | 0xAB; 
	TIMER1_TAILR = TIMER1_TAILR | 0xFFFF; 
	TIMER1_TAMATCH = TIMER1_TAMATCH | 0x4CCD; 
	TIMER1_TAPMR = TIMER1_TAPMR | 0xAB;
// For Port B Pin 5 (TIMER 1B) (Same configuration as before)
	TIMER1_TBMR = TIMER1_TBMR | 0xA; 
	TIMER1_TBPR = TIMER1_TBPR | 0xAB; 
	TIMER1_TBILR = TIMER1_TBILR | 0xFFFF; 
	TIMER1_TBMATCH = TIMER1_TBMATCH | 0x4CCD; 
	TIMER1_TBPMR = TIMER1_TBPMR | 0xAB;	

	//TIMER0_CTL = TIMER0_CTL | 0x1; // Enable PWM PB6 (TIMER 0A)
	//TIMER0_CTL = TIMER0_CTL | 0x100; // Enable PWM PB7 (TIMER 0B)
	//TIMER1_CTL = TIMER1_CTL | 0x1; // Enable PWM PB4 (TIMER 1A)
	//TIMER1_CTL = TIMER1_CTL | 0x100; // Enable PWM PB5 (TIMER 1B)
//////////////////////////////////////////////	KEYPAD PINS //////////////////////////////////////////////////////////////////////
	// Port D pins 3 and 4 will be outputs to the keypad rows and 0,1,2 are inputs from the keypad columns
	PORTD_DIR = PORTD_DIR | 0x18; // pins 3 and 4 are outputs
	PORTD_DIR = PORTD_DIR & ~ 0x7;// pins 0,1,2 are definitely inputs
	PORTD_PDR = PORTD_PDR | 0x7; // If switches are pressed pins 0,1,2 will return high logic
	PORTD_DEN = PORTD_DEN | 0x1F; // all pins (1-4) are digitally enabled   
	
	//Spin
	while (1) {};
}
// Pulse 3 runs voltage in row 1 of the keypad when it is low pulse 4 is high in row 2
int pulse3(void)	// Output voltage pulse from Pin 3 
{
		while (1)
	{
		PORTD_DATA = PORTD_DATA | 0x8; // makes 3 high
		PORTD_DATA = PORTD_DATA & ~ 0x8; // toggles pin 3 to low
	}
}
int pulse4(void)	// Output voltage pulse from Pin 4 180 degrees out of phase from pin 3
{
		while (1)
	{
		PORTD_DATA = PORTD_DATA & ~ 0x10; // makes 4 high
		PORTD_DATA = PORTD_DATA | 0x10; // toggles pin 4 to low
	}
}
